import streamlit as st
import requests
import pandas as pd
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

st.set_page_config(
    page_title="ü§ñ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Data Engineer",
    page_icon="üöÄ",
    layout="wide"
)

def main():
    st.title("ü§ñ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Data Engineer")
    st.markdown("### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ETL –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'sources' not in st.session_state:
        st.session_state.sources = []
    if 'recommendations' not in st.session_state:
        st.session_state.recommendations = None
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üì• –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", "üéØ –ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üíª –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥"])
    
    with tab1:
        handle_data_sources()
    
    with tab2:
        business_requirements = handle_business_requirements()
    
    with tab3:
        if business_requirements and st.session_state.sources:
            handle_recommendations(business_requirements)
    
    with tab4:
        if st.session_state.recommendations:
            display_generated_code()

def handle_data_sources():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    st.header("üì• –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö", expanded=len(st.session_state.sources) == 0):
        source_type = st.selectbox(
            "–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞:",
            ["CSV —Ñ–∞–π–ª", "PostgreSQL", "ClickHouse", "JSON —Ñ–∞–π–ª", "Excel"]
        )
        
        source_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        
        if source_type == "CSV —Ñ–∞–π–ª":
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=['csv'])
            if uploaded_file and source_name:
                delimiter = st.selectbox("–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å", [",", ";", "\t"])
                encoding = st.selectbox("–ö–æ–¥–∏—Ä–æ–≤–∫–∞", ["utf-8", "windows-1251"])
                
                if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å CSV"):
                    with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞..."):
                        try:
                            files = {"file": uploaded_file}
                            response = requests.post(f"{BACKEND_URL}/upload-csv", files=files)
                            
                            if response.status_code == 200:
                                result = response.json()
                                
                                source = {
                                    "id": f"source_{len(st.session_state.sources) + 1}",
                                    "name": source_name,
                                    "type": "csv",
                                    "config": {
                                        "delimiter": delimiter,
                                        "encoding": encoding
                                    },
                                    "schema_info": result["schema"]
                                }
                                
                                st.session_state.sources.append(source)
                                st.success(f"‚úÖ CSV —Ñ–∞–π–ª '{source_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {response.text}")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        
        elif source_type == "PostgreSQL":
            col1, col2 = st.columns(2)
            
            with col1:
                host = st.text_input("–•–æ—Å—Ç", value="localhost")
                database = st.text_input("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
                username = st.text_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            with col2:
                port = st.number_input("–ü–æ—Ä—Ç", value=5432, min_value=1, max_value=65535)
                table = st.text_input("–¢–∞–±–ª–∏—Ü–∞")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            
            if all([host, database, username, password, table, source_name]):
                col_test, col_add = st.columns(2)
                
                with col_test:
                    if st.button("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"):
                        config = {
                            "type": "postgresql",
                            "host": host,
                            "port": port,
                            "database": database,
                            "username": username,
                            "password": password
                        }
                        
                        try:
                            response = requests.post(f"{BACKEND_URL}/test-connection", json=config)
                            result = response.json()
                            
                            if result["status"] == "success":
                                st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                            else:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
                
                with col_add:
                    if st.button("–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"):
                        source = {
                            "id": f"source_{len(st.session_state.sources) + 1}",
                            "name": source_name,
                            "type": "postgresql",
                            "config": {
                                "host": host,
                                "port": port,
                                "database": database,
                                "username": username,
                                "password": password,
                                "table": table
                            }
                        }
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        try:
                            response = requests.post(f"{BACKEND_URL}/analyze-source", json=source)
                            if response.status_code == 200:
                                source["schema_info"] = response.json()
                                st.session_state.sources.append(source)
                                st.success(f"‚úÖ PostgreSQL –∏—Å—Ç–æ—á–Ω–∏–∫ '{source_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.text}")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if st.session_state.sources:
        st.subheader("üìä –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        
        for i, source in enumerate(st.session_state.sources):
            with st.expander(f"üîç {source['name']} ({source['type']})", expanded=False):
                if source.get('schema_info'):
                    schema = source['schema_info']
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("–ö–æ–ª–æ–Ω–∫–∏", len(schema.get('columns', [])))
                    with col2:
                        st.metric("–°—Ç—Ä–æ–∫–∏", schema.get('row_count', 0))
                    with col3:
                        st.metric("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å", f"{((schema.get('row_count', 0) * len(schema.get('columns', [])) - sum(schema.get('null_counts', {}).values())) / max(schema.get('row_count', 0) * len(schema.get('columns', [])), 1) * 100):.1f}%")
                    
                    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–ª–æ–Ω–æ–∫
                    if schema.get('columns'):
                        df_schema = pd.DataFrame({
                            '–ö–æ–ª–æ–Ω–∫–∞': schema['columns'],
                            '–¢–∏–ø': [schema.get('dtypes', {}).get(col, 'unknown') for col in schema['columns']],
                            '–ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è': [schema.get('null_counts', {}).get(col, 0) for col in schema['columns']],
                            '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ': [schema.get('unique_counts', {}).get(col, 0) for col in schema['columns']]
                        })
                        st.dataframe(df_schema, use_container_width=True)
                    
                    # –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
                    if schema.get('sample_data'):
                        st.subheader("üëÄ –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö")
                        sample_df = pd.DataFrame(schema['sample_data'])
                        st.dataframe(sample_df, use_container_width=True)
                
                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {source['name']}", key=f"delete_{i}"):
                    st.session_state.sources.pop(i)
                    st.rerun()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–≤—è–∑–µ–π
        if len(st.session_state.sources) > 1:
            if st.button("üîó –ù–∞–π—Ç–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"):
                with st.spinner("–ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π..."):
                    try:
                        response = requests.post(
                            f"{BACKEND_URL}/find-relationships", 
                            json=st.session_state.sources
                        )
                        
                        if response.status_code == 200:
                            relationships = response.json()["relationships"]
                            
                            if relationships:
                                st.subheader("üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏")
                                
                                for rel in relationships:
                                    st.info(
                                        f"{rel['source1_id']} ‚ÜîÔ∏è {rel['source2_id']}\n"
                                        f"–¢–∏–ø JOIN: {rel['join_type']}\n"
                                        f"–û–±—â–∏–µ –ø–æ–ª—è: {list(rel['join_keys'].keys())}\n"
                                        f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rel['confidence']:.2%}"
                                    )
                            else:
                                st.warning("ü§î –°–≤—è–∑–∏ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                        else:
                            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–µ–π: {response.text}")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

def handle_business_requirements():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    st.header("üéØ –ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    
    business_goal = st.text_area(
        "–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞:",
        placeholder="""
–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ —Ç–æ–≤–∞—Ä–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π  
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–∞–π—Ç–µ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
        """,
        height=120
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        target_metrics = st.multiselect(
            "–í–∞–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:",
            [
                "–ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞", "–ö–æ–Ω–≤–µ—Ä—Å–∏—è", "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", 
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–¥–∞–∂", 
                "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã", "–¢–æ–ø —Ç–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏", 
                "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤", "ROI –∫–∞–º–ø–∞–Ω–∏–π",
                "–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", "–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏"
            ]
        )
        
        update_frequency = st.selectbox(
            "–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
            ["once", "hourly", "daily", "weekly", "realtime"],
            format_func=lambda x: {
                "once": "–†–∞–∑–æ–≤–æ",
                "hourly": "–ö–∞–∂–¥—ã–π —á–∞—Å", 
                "daily": "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å",
                "weekly": "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é",
                "realtime": "–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"
            }[x]
        )
    
    with col2:
        expected_load = st.selectbox(
            "–û–∂–∏–¥–∞–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:",
            [
                "–ù–∏–∑–∫–∞—è (–¥–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)", 
                "–°—Ä–µ–¥–Ω—è—è (10-100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)",
                "–í—ã—Å–æ–∫–∞—è (100+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
            ]
        )
        
        data_retention = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:",
            ["3 –º–µ—Å—è—Ü–∞", "1 –≥–æ–¥", "3 –≥–æ–¥–∞", "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"]
        )
    
    if business_goal:
        return {
            "goal": business_goal,
            "target_metrics": target_metrics,
            "update_frequency": update_frequency,
            "expected_load": expected_load,
            "data_retention": data_retention
        }
    else:
        st.warning("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞")
        return None

def handle_recommendations(business_requirements):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    st.header("üöÄ –ò–ò –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    if st.button("üß† –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò", type="primary", use_container_width=True):
        with st.spinner("ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
            try:
                request_data = {
                    "sources": st.session_state.sources,
                    "business_requirements": business_requirements
                }
                
                response = requests.post(
                    f"{BACKEND_URL}/generate-recommendations",
                    json=request_data,
                    timeout=60
                )
                
                if response.status_code == 200:
                    st.session_state.recommendations = response.json()
                    st.success("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã!")
                    st.rerun()
                else:st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {response.text}")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if st.session_state.recommendations:
        display_recommendations(st.session_state.recommendations)

def display_recommendations(recommendations):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    rec = recommendations["recommendations"]
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ö—Ä–∞–Ω–∏–ª–∏—â—É
    st.markdown("### üóÑÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    
    col1, col2 = st.columns([2, 3])
    
    with col1:
        storage = rec["storage_recommendation"]
        st.metric(
            "–û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", 
            storage["primary"].upper(),
            help=storage["reasoning"]
        )
        
        if storage["alternatives"]:
            st.write("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:")
            for alt in storage["alternatives"]:
                st.write(f"‚Ä¢ {alt}")
    
    with col2:
        st.info(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {storage['reasoning']}")
        
        if storage.get("estimated_size"):
            st.write(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: {storage['estimated_size']}")
    
    # –°—Ö–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
    st.markdown("### üìã –î–∏–∑–∞–π–Ω —Å—Ö–µ–º—ã")
    
    schema = rec["schema_design"]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {schema['main_table']}")
        
        if schema.get("partitioning"):
            st.write(f"–ü–∞—Ä—Ç–∏—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ: {schema['partitioning']}")
        
        if schema.get("indexes"):
            st.write("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã:")
            for idx in schema["indexes"]:
                st.write(f"‚Ä¢ {idx}")
    
    with col2:
        if schema.get("ddl_script"):
            st.code(schema["ddl_script"], language="sql")
    
    # ETL –ø–∞–π–ø–ª–∞–π–Ω
    st.markdown("### ‚öôÔ∏è ETL –ü–∞–π–ø–ª–∞–π–Ω")
    
    pipeline = rec["etl_pipeline"]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for i, step in enumerate(pipeline["steps"], 1):
            st.write(f"{i}. {step}")
        
        st.write(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {pipeline['schedule']}")
        st.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {pipeline['estimated_runtime']}")
    
    with col2:
        if recommendations.get("relationships"):
            st.write("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏:")
            for rel in recommendations["relationships"]:
                st.write(f"‚Ä¢ {rel['source1_id']} ‚Üí {rel['source2_id']}")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∞–Ω–Ω—ã—Ö
    if recommendations.get("data_patterns"):
        st.markdown("### üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        
        patterns = recommendations["data_patterns"]
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", f"{patterns.get('total_estimated_rows', 0):,}")
        
        with col2:
            temporal_status = "‚úÖ –ï—Å—Ç—å" if patterns.get('has_temporal_data') else "‚ùå –ù–µ—Ç"
            st.metric("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", temporal_status)
        
        with col3:
            geo_status = "‚úÖ –ï—Å—Ç—å" if patterns.get('has_geographical_data') else "‚ùå –ù–µ—Ç"  
            st.metric("–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", geo_status)

def display_generated_code():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    st.header("üíª –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥")
    
    if not st.session_state.recommendations:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        return
    
    generated_code = st.session_state.recommendations.get("generated_code", {})
    
    # Airflow DAG
    st.subheader("üå™Ô∏è Airflow DAG")
    
    if generated_code.get("airflow_dag"):
        st.code(generated_code["airflow_dag"], language="python")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å DAG —Ñ–∞–π–ª",
            data=generated_code["airflow_dag"],
            file_name=f"{st.session_state.recommendations.get('project_info', {}).get('name', 'generated')}_dag.py",mime="text/python"
        )
    
    # SQL —Å–∫—Ä–∏–ø—Ç—ã
    st.subheader("üóÑÔ∏è SQL –°–∫—Ä–∏–ø—Ç—ã")
    
    if generated_code.get("sql_scripts"):
        scripts = generated_code["sql_scripts"]
        
        # DDL —Å–∫—Ä–∏–ø—Ç
        if scripts.get("ddl"):
            st.markdown("**–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (DDL):**")
            st.code(scripts["ddl"], language="sql")
        
        # –°–∫—Ä–∏–ø—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if scripts.get("optimization"):
            st.markdown("**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:**")
            st.code(scripts["optimization"], language="sql")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        all_scripts = "\n\n-- DDL Script\n" + scripts.get("ddl", "")
        all_scripts += "\n\n-- Optimization Script\n" + scripts.get("optimization", "")
        
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å SQL —Å–∫—Ä–∏–ø—Ç—ã",
            data=all_scripts,
            file_name="generated_scripts.sql",
            mime="text/sql"
        )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    if st.session_state.recommendations.get("project_info"):
        st.subheader("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
        project_info = st.session_state.recommendations["project_info"]
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:** {project_info.get('name', 'Unknown')}")
        with col2:
            st.write(f"**–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {project_info.get('estimated_runtime', 'Unknown')}")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–µ–ø–ª–æ—é
        st.markdown("### üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
        
        storage_type = st.session_state.recommendations["recommendations"]["storage_recommendation"]["primary"]
        deploy_instructions = f"""
**–®–∞–≥–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:**

1. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**

   # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   ```
   pip install apache-airflow pandas {'clickhouse-driver' if storage_type == 'clickhouse' else 'psycopg2-binary'}
   ```

2. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ Airflow:**

   # Airflow Connections
   ```
   {'ClickHouse: clickhouse_default' if storage_type == 'clickhouse' else 'PostgreSQL: postgres_default'}
   ```
 
3. **–ó–∞–≥—Ä—É–∑–∫–∞ DAG —Ñ–∞–π–ª–∞:**
   
   # –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–∞–ø–∫—É dags Airflow
   ```
   cp generated_dag.py $AIRFLOW_HOME/dags/
   ```
   

4. **–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–æ–≤:**
   
   -- –í—ã–ø–æ–ª–Ω–∏—Ç—å DDL —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
   

5. **–ê–∫—Ç–∏–≤–∞—Ü–∏—è DAG –≤ Airflow UI**
        """
        
        st.markdown(deploy_instructions)

if __name__ == "__main__":
    main()
